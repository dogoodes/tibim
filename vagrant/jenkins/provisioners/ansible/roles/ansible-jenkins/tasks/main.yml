---
# Add Jenkins repository
- name: Add jenkins apt-key
  sudo: yes
  action: apt_key url={{ jenkins.deb.key }} state=present

# Add Jenkins repository
- name: Add Jenkins repository
  sudo: yes
  action: apt_repository repo='{{ jenkins.deb.repo }}' state=present

# Install Jenkins
- name: Install Jenkins
  sudo: yes
  action: "{{ ansible_pkg_mgr }} pkg=jenkins state=latest update-cache=yes"
  register: jenkins_install

# Copy config files to jenkins home
- name: copy config XML's to jenkins home
  sudo: yes
  copy: src={{ item }} dest={{ jenkins_home }} owner=jenkins mode=600
  with_fileglob:
        - "{{ local_files_dir }}/jenkins/config/*.xml"
  register: default_configs_copied

# Playbook to copy the publish over ssh plugin configs to jenkins
# and update it with the machine's rsa key and tomcat web apps folder
# The playbook begins by copying and updating the generated rsa key, if it exists.
- name: Output jenkins directory
  sudo: yes
  command: ls -la {{ jenkins_home }}
  register: jenkins_dir_list

- name: Results - output jenkins directory
  debug: var=jenkins_dir_list.stdout_lines
  when: jenkins_dir_list is defined

- name: Make directory for rsa ssh key if needed
  sudo: yes
  command: mkdir {{ jenkins_home }}/{{ ssh_dir }}
  when: jenkins_dir_list is defined and jenkins_dir_list.stdout.find('{{ ssh_dir }}') == -1
  register: jenkins_rsa_key_dir_created

- name: Output jenkins ssh directory
  sudo: yes
  command: ls -la {{ jenkins_home }}/{{ ssh_dir }}
  when: jenkins_rsa_key_dir_created is defined
  register: jenkins_ssh_dir_list

- name: Results - output jenkins ssh directory
  debug: var=jenkins_ssh_dir_list.stdout_lines
  when: jenkins_ssh_dir_list is defined

- name: Copy rsa key to jenkins ssh directory
  sudo: yes
  command: cp /home/{{ user_name  | default('vagrant') }}/{{ ssh_dir }}/{{ rsa_key_file }} {{ jenkins_home }}/{{ ssh_dir }}
  when: jenkins_ssh_dir_list.stdout.find('{{ rsa_key_file }}') == -1 and rsa_keygen_results is defined
  register: jenkins_rsa_key_copied

- name: Output updated jenkins ssh directory
  sudo: yes
  command: ls -la {{ jenkins_home }}/{{ ssh_dir }}
  when: jenkins_rsa_key_dir_created is defined
  register: jenkins_ssh_dir_list_updated

- name: Results - output updated jenkins ssh directory
  debug: var=jenkins_ssh_dir_list_updated.stdout_lines
  when: jenkins_ssh_dir_list_updated is defined

- name: Update permissions for rsa_key located in jenkins ssh directory
  sudo: yes
  command: chmod 400 {{ jenkins_home }}/{{ ssh_dir }}/{{ rsa_key_file }}
  when: jenkins_ssh_dir_list_updated.stdout.find('{{ rsa_key_file }}') != -1
  register: jenkins_rsa_key_chmod

- name: Change owner and group of rsa_key located in jenkins ssh directory
  sudo: yes
  command: chown jenkins:jenkins {{ jenkins_home }}/{{ ssh_dir }}/{{ rsa_key_file }}
  when: jenkins_ssh_dir_list_updated.stdout.find('{{ rsa_key_file }}') != -1
  register: jenkins_key_chown

- name: Copy publish over ssh config XML's to jenkins home
  sudo: yes
  copy: src={{ item }} dest={{ jenkins_home }} owner=jenkins mode=600
  with_fileglob:
        - "{{ local_files_dir_four_levels }}/jenkins/config/publish-over-ssh/{{ plugin_config_files.publish_over_ssh }}"
  when: jenkins_dir_list.stdout.find('{{ plugin_config_files.publish_over_ssh }}') == -1 and plugin_config_files is defined and plugin_config_files.publish_over_ssh is defined
  register: publish_over_SSH_configs_copied

- name: Output updated jenkins directory
  sudo: yes
  command: ls -la {{ jenkins_home }}
  register: jenkins_dir_list_updated

- name: Results - output updated jenkins directory
  debug: var=jenkins_dir_list_updated.stdout_lines
  when: jenkins_dir_list_updated is defined

- name: Set keyPath for publish over ssh config with rsa key file location
  sudo: yes
  replace: dest={{ jenkins_home }}/{{ plugin_config_files.publish_over_ssh }} regexp='{{ plugin_config_patterns.rsa_key_file }}' replace={{ jenkins_home }}/{{ ssh_dir }}/{{ rsa_key_file }}
  when: jenkins_dir_list_updated.stdout.find('{{ plugin_config_files.publish_over_ssh }}') != -1 and plugin_config_patterns is defined and plugin_config_patterns.rsa_key_file is defined
  register: publish_over_SSH_configs_rsa_key_update

- name: Set remoteRootDir for publish over ssh config with tomcat web apps folder
  sudo: yes
  replace: dest={{ jenkins_home }}/{{ plugin_config_files.publish_over_ssh }} regexp='{{ plugin_config_patterns.tomcat_web_apps }}' replace={{ tomcat.web_apps_folder }}
  when: jenkins_dir_list_updated.stdout.find('{{ plugin_config_files.publish_over_ssh }}') != -1 and tomcat.web_apps_folder is defined and plugin_config_patterns.tomcat_web_apps is defined
  register: publish_over_SSH_configs_remote_root_dir_update

# Modify config file
- name: Set Git Name in Git Plugin Config
  sudo: yes
  shell: "groovy {{ remote_tmp_folder }}/script/updatenode.groovy -n globalConfigName -v '{{ git.name }}' {{ jenkins_home }}/{{ plugin_config_files.git_scm }}"
  when: ansible_distribution in [ 'Debian', 'Ubuntu' ] and plugin_config_files is defined and plugin_config_files.git_scm is defined
  register: set_git_name

- name: Set Git Email in Git Plugin Config
  sudo: yes
  shell: "groovy {{ remote_tmp_folder }}/script/updatenode.groovy -n globalConfigEmail -v '{{ git.email }}' {{ jenkins_home }}/{{ plugin_config_files.git_scm }}"
  when: ansible_distribution in [ 'Debian', 'Ubuntu' ] and set_git_name|success
  register: set_git_email

# Modify config file
- name: Set rally server in Rally Plugin Config
  sudo: yes
  shell: "groovy {{ remote_tmp_folder }}/script/updatenode.groovy -n rallyServer -v '{{ rally.server }}' {{ jenkins_home }}/{{ plugin_config_files.rally_build_notifier }}"
  when: ansible_distribution in [ 'Debian', 'Ubuntu' ] and plugin_config_files is defined and plugin_config_files.rally_build_notifier is defined
  register: set_rally_server

- name: Set username/email in Rally Plugin Config
  sudo: yes
  shell: "groovy {{ remote_tmp_folder }}/script/updatenode.groovy -n username -v '{{ rally.email }}' {{ jenkins_home }}/{{ plugin_config_files.rally_build_notifier }}"
  when: ansible_distribution in [ 'Debian', 'Ubuntu' ] and set_rally_server|success
  register: set_rally_email

- name: Set jenkins machine name in Rally Plugin Config
  sudo: yes
  shell: "groovy {{ remote_tmp_folder }}/script/updatenode.groovy -n hudsonServer -v '{{ rally.jenkins_machine }}' {{ jenkins_home }}/{{ plugin_config_files.rally_build_notifier }}"
  when: ansible_distribution in [ 'Debian', 'Ubuntu' ] and set_rally_server|success
  register: set_rally_jenkins_machine

# update defaults JAVA_OPTS for jenkins
- name: Update defaults JAVA_OPTS for jenkins
  sudo: yes
  shell: "groovy {{ remote_tmp_folder }}/script/jenkinsargs.groovy -m {{ jenkins_opts.memory }} -p {{ jenkins_opts.maxPermSize }} /etc/default/jenkins"
  when: ansible_distribution in [ 'Debian', 'Ubuntu' ] and jenkins_opts.enable_configure
  register: update_default_jenkins_opts

- name: Results - Update defaults JAVA_OPTS
  debug: var=update_default_jenkins_opts.stdout_lines

# Remove Jenkins Security
# remove security from jenkins
# set useSecurity to false
- name: Disable Jenkins Security
  sudo: yes
  shell: "groovy {{ remote_tmp_folder }}/script/updatenode.groovy -n useSecurity -v false {{ jenkins_home }}/config.xml"
  when: ansible_distribution in [ 'Debian', 'Ubuntu' ]
  register: disable_security

- name: Results - Disable Jenkins Security
  debug: var=disable_security.stdout_lines

# Restart jenkins service if security was turned off
# or a new version of jenkins was installed
# to get the latest jenkins-cli.jar
- name: Restarting jenkins service
  sudo: yes
  shell: "service jenkins restart"
  when: "disable_security.stdout.find('Value Before => [useSecurity[attributes={}; value=[true]]]') != -1 or jenkins_install.changed or update_default_jenkins_opts.changed"
  register: restart_jenkins_service

# Wait for jenkins to start
- name: "{{ startup_delay_s | default(45) }}s delay while starting Jenkins"
  wait_for: port=8080 delay={{ startup_delay_s | default(45) }}
  when: restart_jenkins_service.changed

# Install Jenkins cli
# Handle plugins
# If Jenkins is installed or updated, wait for pulling the Jenkins CLI
# - name: "{{ startup_delay_s | default(80) }}s delay while starting Jenkins"
#   wait_for: port=8080 delay={{ startup_delay_s | default(80) }}
#   when: jenkins_install.changed

# Create Jenkins CLI destination directory
- name: "Create Jenkins CLI destination directory: {{ jenkins_dest }}"
  sudo: yes
  action: file path={{ jenkins_dest }} state=directory

# Get Jenkins CLI from localhost
- name: Get Jenkins CLI
  sudo: yes
  action: get_url url=http://localhost:8080/jnlpJars/jenkins-cli.jar dest={{ jenkins.cli_dest }} mode=0440

# Get latest Jenkins update file
- name: Get Jenkins updates
  sudo: yes
  action: get_url url=http://updates.jenkins-ci.org/update-center.json dest={{ jenkins.updates_dest }} thirsty=yes mode=0440
  register: jenkins_updates

# Jenkins Update-center
- name: Update-center Jenkins
  sudo: yes
  action: "shell cat {{ jenkins.updates_dest }} | sed '1d;$d' | curl -X POST -H 'Accept: application/json' -d @- http://localhost:8080/updateCenter/byId/default/postBack"
  when: jenkins_updates.changed
  # notify:
  #   - 'Restart Jenkins'

# Install/update Jenkins plugins
- name: List plugins
  sudo: yes
  action: shell java -jar {{ jenkins.cli_dest }} -s http://localhost:8080 list-plugins | cut -f 1 -d ' '
  when: plugins is defined
  register: plugins_installed

# Install/update Jenkins plugins
- name: Install/update plugins
  sudo: yes
  action: command java -jar {{ jenkins.cli_dest }} -s http://localhost:8080 install-plugin {{ item }}
  when: plugins_installed.changed and plugins_installed.stdout.find('{{ item }}') == -1
  with_items: plugins
  register: installed_plugins
  # notify:
  #   - 'Restart Jenkins'

- name: List plugins to be updated
  sudo: yes
  action: shell java -jar {{ jenkins.cli_dest }} -s http://localhost:8080 list-plugins | grep ')$' | cut -f 1 -d ' ' | sed ':a;N;$!ba;s/\n/ /g'
  register: plugins_updates

- name: Update plugins
  sudo: yes
  action: command java -jar {{ jenkins.cli_dest }} -s http://localhost:8080 install-plugin {{ plugins_updates.stdout }}
  when: plugins_updates.stdout != ''
  # notify:
  #   - 'Restart Jenkins'
